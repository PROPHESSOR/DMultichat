{"version":3,"sources":["../src/ipfilter.js"],"names":[],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *\n *      app.use(ipfilter(ips));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `log` console log actions. Defaults to true.\n *  - `errorCode` the HTTP status code to use when denying access. Defaults to 401.\n *  - `errorMessage` the error message to use when denying access. Defaults to 'Unauthorized'.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [Array] IP addresses\n * @param {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var logger = function(message){ console.log(message);};\n  var settings = _.defaults( opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    errorCode: 401,\n    errorMessage: 'Unauthorized',\n    allowPrivateIPs: false,\n    allowForward: false,\n    allowCloudflare: false,\n    allowCodio: false,\n    excluding: []\n  });\n\n  var getClientIp = function(req) {\n    var ipAddress;\n\n    var forwardedIpsStr = '';\n\n    if(settings.allowForward){\n      forwardedIpsStr = req.headers['x-forwarded-for'];\n    }\n\n    //Allow getting cloudflare connecting client IP\n    var cloudFlareConnectingIp = '';\n    if(settings.allowCloudflare){\n      cloudFlareConnectingIp = req.headers['cf-connecting-ip'];\n    }\n\n    //Allow getting codio connecting client IP\n    var codioConnectingIp = '';\n    if(settings.allowCodio){\n      codioConnectingIp = req.headers['x-real-ip'];\n    }\n\n    if (forwardedIpsStr) {\n      var forwardedIps = forwardedIpsStr.split(',');\n      ipAddress = forwardedIps[0];\n    }\n\n    if (!ipAddress) {\n      ipAddress = req.connection.remoteAddress;\n    }\n\n    if(cloudFlareConnectingIp){\n      ipAddress=cloudFlareConnectingIp;\n    }\n\n    if(codioConnectingIp){\n      ipAddress=codioConnectingIp;\n    }\n\n    if(!ipAddress){\n      return '';\n    }\n\n    if(ipAddress.indexOf(':') !== -1 && ipAddress.indexOf('::') === -1){\n      ipAddress = ipAddress.split(':')[0];\n    }\n\n    return ipAddress;\n  };\n\n  var matchClientIp = function(ip){\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invoke(ips,testIp,ip,mode);\n\n    if(mode === 'allow'){\n      return _.some(result);\n    }else{\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip,mode){\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if(typeof constraint === 'string'){\n      if(rangeCheck.validRange(constraint)){\n        return testCidrBlock(ip,constraint,mode);\n      }else{\n        return testExplicitIp(ip,constraint,mode);\n      }\n    }\n\n    if(typeof constraint === 'object'){\n      return testRange(ip,constraint,mode);\n    }\n  };\n\n  var testExplicitIp = function(ip,constraint,mode){\n    if(ip === constraint){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip,constraint,mode){\n    if(rangeCheck.inRange(ip, constraint)){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip,constraint,mode){\n    var filteredSet = _.filter(ips,function(constraint){\n      if(constraint.length > 1){\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return  longIp >= startIp && longIp <= endIp;\n      }else{\n        return ip === constraint[0];\n      }\n    });\n\n    if(filteredSet.length > 0){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  return function(req, res, next) {\n    if(settings.excluding.length > 0){\n      var results = _.filter(settings.excluding,function(exclude){\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if(results.length > 0){\n        if(settings.log){\n          logger('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var ip = getClientIp(req);\n    // If no IPs were specified, skip\n    // this middleware\n    if(!ips || !ips.length) { return next(); }\n\n    if(matchClientIp(ip,req)) {\n      // Grant access\n      if(settings.log) {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if(settings.log) {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    res.statusCode = settings.errorCode;\n    return res.send(settings.errorMessage);\n  };\n};\n"]}